# Gravity AI - API Backend Environment Configuration
# Copy this file to .env for FastAPI development
# This file contains BACKEND-SPECIFIC variables only (SECRETS)

# =================================================================
# FASTAPI CONFIGURATION
# =================================================================

# Application Environment
ENVIRONMENT=development

# Server port (FastAPI will run on this port)
PORT=8000

# Logging configuration
LOG_LEVEL=INFO
STRUCTURED_LOGGING=true

# Development features
DEBUG=true
ENABLE_DOCS=true

# CORS configuration for development
ALLOWED_ORIGINS=http://localhost:3000,http://web:3000

# =================================================================
# GOOGLE CLOUD PLATFORM CONFIGURATION
# =================================================================

# Primary GCP project identifier
GOOGLE_CLOUD_PROJECT=gravityai-64e30

# Default deployment region for all services
REGION=asia-south1

# Google Cloud project for Vertex AI services
VERTEX_PROJECT_ID=gravityai-64e30

# Regional location for Vertex AI services
VERTEX_LOCATION=asia-south1

# Google Cloud credentials file path (optional for local development)
# Set this if you have a service account key file
# GOOGLE_APPLICATION_CREDENTIALS=/path/to/your/service-account.json

# =================================================================
# AI & ML SERVICES (SECRETS)
# =================================================================

# OpenAI API authentication for GPT models
# Get from: https://platform.openai.com/api-keys
# IMPORTANT: Replace with your actual OpenAI API key
OPENAI_API_KEY=sk-your_openai_api_key_here

# =================================================================
# WHATSAPP INTEGRATION (WATI) - SECRETS
# =================================================================

# WhatsApp service provider identifier
WHATSAPP_PROVIDER=wati

# WATI service API endpoint base URL
# Get from WATI dashboard - includes your server ID
# Example: https://live-server-12345.wati.io/api/v1
WATI_API_BASE_URL=https://live-server-xxxxx.wati.io/api/v1

# WATI authentication token
# Get from WATI dashboard > Settings > API
# IMPORTANT: Replace with your actual WATI token
WATI_TOKEN=your_wati_token_here

# Webhook verification secret for WATI
# Used to verify incoming webhook requests from WATI
# Set this in WATI dashboard > Settings > Webhooks
WATI_VERIFY_SECRET=your_wati_verify_secret_here

# =================================================================
# FIREBASE SERVER-SIDE CONFIGURATION
# =================================================================

# Firebase project ID for server-side operations
FIREBASE_PROJECT_ID=gravityai-64e30

# Firebase Admin SDK service account (for production, use Secret Manager)
# In development, you can use a service account key file
# FIREBASE_ADMIN_KEY_PATH=/path/to/firebase-admin-key.json

# =================================================================
# GOOGLE CLOUD SERVICES
# =================================================================

# Pub/Sub Configuration
PUBSUB_PROJECT_ID=gravityai-64e30
WEBHOOK_TOPIC=dev-gravity-ai-inbound-msg
INSIGHTS_TOPIC=dev-gravity-ai-digests-daily

# Cloud Storage Configuration
STORAGE_BUCKET=gravity-ai-storage-dev
TEMP_BUCKET=gravity-ai-temp-dev

# Firestore Database Configuration
FIRESTORE_PROJECT_ID=gravityai-64e30
FIRESTORE_DATABASE=(default)

# =================================================================
# AUTHENTICATION & SECURITY (FUTURE)
# =================================================================

# JWT token signing key for application authentication
# Generate with: python -c "import secrets; print(secrets.token_urlsafe(64))"
# JWT_SIGNING_KEY=your_jwt_signing_key_here

# API key salt for hashing
# Generate with: python -c "import secrets; print(secrets.token_hex(32))"
# API_KEY_SALT=your_api_key_salt_here

# =================================================================
# MONITORING & OBSERVABILITY (OPTIONAL)
# =================================================================

# Sentry error tracking DSN for the API service
# Get from Sentry dashboard
# SENTRY_DSN=https://your_sentry_dsn_here

# DataDog monitoring API key
# DATADOG_API_KEY=your_datadog_api_key_here

# =================================================================
# DEVELOPMENT TOOLS
# =================================================================

# Enable debug logging for development
DEBUG_LOGGING=true

# Redis URL for rate limiting and caching (optional)
# REDIS_URL=redis://localhost:6379/0

# =================================================================
# RATE LIMITING (FUTURE)
# =================================================================

# Rate limiting configuration
# RATE_LIMIT_PER_MINUTE=60
# RATE_LIMIT_BURST=10

# Request timeout in seconds
# REQUEST_TIMEOUT=30
